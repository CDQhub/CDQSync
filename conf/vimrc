" basic setting
set nocompatible
syntax on
filetype on
filetype indent on
filetype plugin indent on
filetype plugin on
set number
"set relativenumber
set backspace=indent,eol,start
set foldmethod=indent
set foldlevel=99
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set cindent
set showcmd
set wildmenu
set t_Co=256
set wrap
set linebreak
set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase
set history=188
set scrolloff=5
set encoding=utf-8
set clipboard=unnamed
set autochdir
set cursorline
set scrolloff=6

" basic mapping
map S :w<CR>
map Q :q<CR>
map R :source $MYVIMRC<CR>
map sl :set nosplitright<CR>:vsplit<CR>
map sr :set splitright<CR>:vsplit<CR>
map su :set nosplitbelow<CR>:split<CR>
map sd :set splitbelow<CR>:split<CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
map <up> :res +5<CR>
map <down> :rse -5<CR>
map <left> :vertical resize-5<CR>
map <right> :vertical resize+5<CR>
map tt :tabe<CR>
map tl :-tabnext<CR>
map tr :+tabnext<CR>
nnoremap <space> za

call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'
"Plug 'KeitaNakamura/neodark.vim'
"Plug 'crusoexia/vim-monokai'
"Plug 'acarapetis/vim-colors-github'
"Plug 'rakr/vim-one'
Plug 'vim-airline/vim-airline'
Plug 'nathanaelkane/vim-indent-guides'

Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }

Plug 'tmhedberg/SimpylFold'
Plug 'jiangmiao/auto-pairs'
Plug 'airblade/vim-gitgutter'
"Plug 'Valloric/YouCompleteMe'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'vim-scripts/indentpython.vim'
Plug 'fatih/vim-go', { 'tag': '*'  }
Plug 'dgryski/vim-godef'

Plug 'scrooloose/syntastic'
Plug 'elzr/vim-json'
Plug 'hail2u/vim-css3-syntax'
Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }
Plug 'gko/vim-coloresque', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less', 'go'] }
Plug 'pangloss/vim-javascript', { 'for' :['javascript', 'vim-plug'] }
Plug 'mattn/emmet-vim'

call plug#end()

" YouCompleteMe setting
"let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"set completeopt-=preview
"nnoremap <C-g> :YcmCompleter GoToDefinitionElseDeclaration<CR>
"let g:ycm_key_invoke_completion='<C-a>'
"let g:ycm_key_list_select_completion = ['<C-n>', '<space>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'
"let g:UltiSnipsExpandTrigger = '<tab>'
"let g:UltiSnipsJumpForwardTrigger = '<tab>'
"let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

"markdown
map <silent> <F5> <Plug>MarkdownPreview
map <silent> <F6> <Plug>StopMarkdownPreview

" coc.nvim setting
set timeoutlen=100
set cmdheight=2
inoremap <C-d> <Esc>:set cmdheight=2<CR>a
inoremap <C-t> <Esc>:set cmdheight=10<CR>a
nnoremap <C-d> :set cmdheight=2<CR>
nnoremap <C-t> :set cmdheight=10<CR>
set updatetime=1000
set shortmess+=c
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Use K to show documentation in preview window
nnoremap ? :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction
" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')"

" SimplyFold setting
let g:SimpylFold_docstring_preview=1

" airline setting
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
"let g:airline_theme='luna'
let g:airline_theme='gruvbox'
let python_highlight_all=1
if has('win32')
	set guifont=Hermit:h14
	set guifontwide=Microsoft_YaHei_Mono:h14
endif

" scrooloose/nerdtree setting
map <F9> :NERDTreeToggle<CR>
let NERDTreeAutoCenter=1
let NERDTreeShowHidden=0
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
let NERDTreeShowBookmarks=2
let g:nerdtree_tabs_open_on_console_startup=1

" nerdtree-git-plugin
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
let g:NERDTreeShowIgnoredStatus = 0

" tagbar setting
let g:tagbar_width=40 
map <F8> :TagbarToggle<CR>
map! <F8> <Esc>:TagbarToggle<CR>
let g:tagbar_type_go = {
   \ 'ctagstype' : 'go',
   \ 'kinds'     : [
   \ 'p:package',
   \ 'i:imports:1',
   \ 'c:constants',
   \ 'v:variables',
   \ 't:types',
   \ 'n:interfaces',
   \ 'w:fields',
   \ 'e:embedded',
   \ 'm:methods',
   \ 'r:constructor',
   \ 'f:functions'
   \ ],
   \ 'sro' : '.',
   \ 'kind2scope' : {
   \ 't' : 'ctype',
   \ 'n' : 'ntype'
   \ },
   \ 'scope2kind' : {
   \ 'ctype' : 't',
   \ 'ntype' : 'n'
   \ },
   \ 'ctagsbin'  : 'gotags',
   \ 'ctagsargs' : '-sort -silent'
   \ }

" vim-indent-guides setting
noremap <F5> :IndentGuidesToggle<CR>
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
let g:indent_guides_color_change_percent = 1
let g:indent_guides_enable_on_vim_startup = 1
silent! unmap <LEADER>ig
autocmd WinEnter * silent! unmap <LEADER>ig

" mark badwhitespace with red
highlight BadWhitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" colorscheme
let $t_ut=''
set background=dark
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_contrast_light = 'medium'
if has("termguicolors")
    " fix bug for vim
    set t_8f=^[[38;2;%lu;%lu;%lum
    set t_8b=^[[48;2;%lu;%lu;%lum
    " enable true color
    set termguicolors
endif
"let &t_SI = "\<ESC>]50;CursorShape=1\x7"
"let &t_SR = "\<ESC>]50;CursorShape=2\x7"
"let &t_EI = "\<ESC>]50;CursorShape=0\x7"

" vim-go 
"let g:go_version_warning = 0
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1
let g:godef_split=2
