" basic setting
set nocompatible
syntax on
filetype on
"filetype indent on
"filetype plugin on
set number
"set relativenumber
set backspace=indent,eol,start
set foldmethod=indent
set foldlevel=99
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set cindent
set showcmd
set wildmenu
set t_Co=256
set wrap
set linebreak
set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase
set history=188
set scrolloff=5
set encoding=utf-8
set clipboard=unnamed
set autochdir
set cursorline
set scrolloff=6

" scroll lines that are too long just slow when a line is too long
set synmaxcol=1000
set ttyfast
set ttyscroll=3
set lazyredraw

" undo file. Note: you must create ~/.vim/undo first
set undofile
set undodir=~/.vim/undo
set undolevels=1000

" basic mapping
map S :w<CR>
map Q :q<CR>
map R :source $MYVIMRC<CR>
map sl :set nosplitright<CR>:vsplit<CR>
map sr :set splitright<CR>:vsplit<CR>
map su :set nosplitbelow<CR>:split<CR>
map sd :set splitbelow<CR>:split<CR>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
inoremap jj <esc>
map <up> :res +5<CR>
map <down> :rse -5<CR>
map <left> :vertical resize-5<CR>
map <right> :vertical resize+5<CR>
nnoremap <C-T> :tabedit<CR>
nnoremap tr :tabNext<CR>
nnoremap tl :tabs<CR>
nnoremap <space> za
let mapleader=","
cnoremap w!! w !sudo tee % >/dev/null

call plug#begin('~/.vim/plugged')

" theme
"Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
"Plug 'crusoexia/vim-monokai'
"Plug 'acarapetis/vim-colors-github'
Plug 'vim-airline/vim-airline'
Plug 'mhinz/vim-startify'

" markdown
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'

" dir plugin
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'

" text crary
Plug 'nathanaelkane/vim-indent-guides'
Plug 'jiangmiao/auto-pairs'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/vim-easy-align'
Plug 'itchyny/vim-cursorword'
Plug 'lfv89/vim-interestingwords'

" code write
Plug 'vim-scripts/indentpython.vim'
Plug 'fatih/vim-go', { 'tag': '*'}
Plug 'dgryski/vim-godef'
Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }
Plug 'pangloss/vim-javascript', { 'for' :['javascript', 'vim-plug'] }
Plug 'scrooloose/syntastic'
Plug 'elzr/vim-json'
Plug 'hail2u/vim-css3-syntax'
" this plug for html
Plug 'mattn/emmet-vim'

" code crary
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tmhedberg/SimpylFold'
Plug 'Chiel92/vim-autoformat'
Plug 'preservim/nerdcommenter'
Plug 'gko/vim-coloresque', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less', 'go'] }

call plug#end()

" vim-indent-guides setting
noremap <F5> :IndentGuidesToggle<CR>
let g:indent_guides_guide_size = 4
let g:indent_guides_start_level = 1
let g:indent_guides_color_change_percent = 20
let g:indent_guides_enable_on_vim_startup = 1
silent! unmap <LEADER>ig

" vim-easy-align setting
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" markdown
nmap <silent> <F8> <Plug>MarkdownPreview
imap <silent> <F8> <Plug>MarkdownPreview
nmap <silent> <F9> <Plug>StopMarkdownPreview
imap <silent> <F9> <Plug>StopMarkdownPreview

" vim-interestingwords setting
nnoremap <silent> <leader>f :call InterestingWords('n')<cr>
nnoremap <silent> <leader>F :call UncolorAllWords()<cr>
nnoremap <silent> n :call WordNavigation('forward')<cr>
nnoremap <silent> N :call WordNavigation('backward')<cr>

" scrooloose/nerdtree setting
map <F10> :NERDTreeToggle<CR>
let NERDTreeAutoCenter=1
let NERDTreeShowHidden=0
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
let NERDTreeShowBookmarks=2
let g:nerdtree_tabs_open_on_console_startup=1

" vim-startify setting
let g:startify_change_to_dir=0
let g:startify_session_autoload=1

" nerdcommenter setting
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1

" coc.nvim setting
set hidden
set timeoutlen=100
set cmdheight=2
set updatetime=1000
set shortmess+=c
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Use K to show documentation in preview window
nnoremap ? :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" SimplyFold setting
let g:SimpylFold_docstring_preview=1

" airline setting
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
"let g:airline_theme='luna'
let g:airline_theme='onedark'
let python_highlight_all=1
if has('win32')
	set guifont=Hermit:h14
	set guifontwide=Microsoft_YaHei_Mono:h14
endif

" nerdtree-git-plugin
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
let g:NERDTreeShowIgnoredStatus = 0

" mark badwhitespace with red
highlight BadWhitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" colorscheme
let $t_ut=''
set background=dark
colorschem onedark
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_contrast_light = 'medium'

" vim-go 
let g:go_version_warning = 0
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1
let g:godef_split=2
